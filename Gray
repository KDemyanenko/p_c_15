fn gray(n: u8) -> Vec<String> {
    let mut result = Vec::new(); 
    for i in 0..(1 << n) {
        let gray_code = i ^ (i >> 1); 
        let binary_str = format!("{:0n$b}", gray_code, n = n as usize); 
        result.push(binary_str); 
    }
    result 
}
#[cfg(test)]
mod tests {
    use super::*; 
    #[test]
    fn test_gray() {
        let test_data = [
            (0, vec![""]),
            (1, vec!["0", "1"]),
            (2, vec!["00", "01", "11", "10"]),
            (3, vec!["000", "001", "011", "010", "110", "111", "101", "100"]),
            (4, vec!["0000", "0001", "0011", "0010", 
                     "0110", "0111", "0101", "0100", 
                     "1100", "1101", "1111", "1110", 
                     "1010", "1011", "1001", "1000"]),
        ];
        for (n, expected) in test_data.iter() {
            assert_eq!(gray(*n), *expected);
        }
    }
}

fn main() {
    let n = 3; 
    let gray_codes = gray(n);
    for code in gray_codes {
        println!("{}", code); 
    }
}





Я створив функцію gray, яка генерує Gray-коди для чисел із n бітами. Спочатку створив порожній вектор result, куди додаю коди. 

Для кожного числа від 0 до 2^n - 1 обчислюю Gray-код за формулою i ^ (i >> 1) і перетворюю його на рядок із n бітів. Рядки додаю у вектор і повертаю результат.

Для тестування створив масив test_data з тестовими випадками для різних значень n і перевіряю правильність роботи функції через assert_eq!.

У main викликав функцію для n = 3 і вивів Gray-коди в консоль.








